#+LATEX_HEADER:\uspackage{xeCJK}
* Emaces Usful Command
** Command
*** 常用命令
 #+BEGIN_SRC 
  cmd --insecure 模式打开emacs才能有网络连接
  cmd --insecure 用Texlive GUI command-line打开emacs之后默认用texlive编译.tex
  c-x c-s 保存当前文件
  m-x list-package 列出所有package
  c-x o 切换窗口
  m-> 文档底部
  m-< 文档开头
  c-v 上滚屏
  m-v 下滚屏
  c-x c-b 列出所有缓冲区/没什么用 直接用打开文件就行了
  c-x h 全选
  c-space 标记
  c-@     标记
  c-/ 撤销命令
  c-_ 撤销命令
  M-m 打开spacemacs主菜单
  M-m TAB一键循环切换buffer
  c-e M-b 先切换到行尾 然后按句子单位回退
  M-e M-a 换行 到指定位置 最好用的命令
  M-; 注释掉当前行
  M-m 0-9 提供于windows-numbering包 作用：当有多个buffer同时打开时，一键切换当前选中buffer
 #+END_SRC
*** 命令主菜单
#+BEGIN_SRC 
M-m spacemacs buffer管理
M-x helm-command
c-c 当前文档格式 编译菜单
c-x 文档保存 新建等管理
c-h 帮助
#+END_SRC
*** 帮助
 #+BEGIN_SRC 
    c-h 主命令
    c-h a 查找关键词对应的函数
    c-h f 函数
    c-h v 变量
    c-h k 快捷键
 #+END_SRC
** 一些解决方案
***  多buffer管理： 
先分屏 后打开buffer
***  快捷跳转行数
#+BEGIN_SRC 
M-g g 跳转到第几行  需要设置显示行数功能
#+END_SRC
*** 设置在左侧显示行数功能
**** 绑定按键及配置文件
 #+BEGIN_SRC 
 spacemacs build in function
 C-x t 绑定按键到M-x linum-mode
 #+END_SRC
 绑定按键的配置文件 修改init.el文件
 #+BEGIN_SRC 
 ;; global-set-key
 ;;
 ;; set linum-mode
 (global-set-key (kbd "C-x t") 'linum-mode)
 #+END_SRC
****  特别注意需要linum-relative package的支持
在.spaces中初始化才能startup载入
**** 可以直接搜索变量 C-h v 然后配置变量
好处是，可以通过UI界面来配置初始化变量
*** 复制粘贴及矩形区域选择解决方案
**** 利用expand region的快捷键 
     #+BEGIN_SRC 
     M-m v 标记并可以调整区域
     #+END_SRC
**** 利用C-x C-x 瞬间交换光标的位置与开头或者结尾
完美！解决！
** Spacemacs
*** Spacemacs 配置文件 添加package cuda-mode
 添加该段代码到.spacemacs.el文件中的合适位置
 #+BEGIN_SRC 
 ;; add packages 
 ;;
 (defun dotspacemacs/layers ()
   "Configuration Layers declaration."
   (setq-default
    ;; ...
    ;; List of additional packages that will be installed wihout being
    ;; wrapped in a layer. If you need some configuration for these
    ;; packages then consider to create a layer, you can also put the
    ;; configuration in `dotspacemacs/config'.
    ;; add packages
    dotspacemacs-additional-packages '(
                                       cuda-mode
                                       company
                                       )
    ;; ...
    ))

 (defun dotspacemacs/config ()
   "Configuration function.
 This function is called at the very end of Spacemacs initialization after
 layers configuration."
   ;; add packages
   dotspacemacs-additional-packages '(
                                      cuda-mode
                                      company
                                      )
   ;; 
   )
 #+END_SRC
*** Spacemacs 配置文件 初始化init.el文件 使所有buffer默认打开company模式
 #+BEGIN_SRC
 ;; Enable global company mode
 (require 'company)
 (add-hook 'after-init-hook 'global-company-mode)
 (setq company-idle-delay 0.1)
 (setq company-minimum-prefix-length 1)
 (setq company-backends '((company-capf company-files company-elisp company-inf-ruby company-anaconda company-go company-irony company-clang company-cmake company-css company-yasnippet) (company-dabbrev company-dabbrev-code)))
 #+END_SRC
** Company 自动补全包 命令集
#+BEGIN_SRC 
M-n M-p select
Enter: to complete 
C-s, C-r and C-o: Search through the completions with 
M-(digit) to quickly complete with one of the first 10 candidates.
#+END_SRC
** Expand-region 快捷键文本选中 package
#+BEGIN_SRC 
M-m v 选中当前光标所在的单词，继续按v则扩大选区 V则缩小选区 具体命令见下方说明
#+END_SRC
** Magit package自动上传本地文档到github
#+BEGIN_SRC 
C-x g 已通过global-set-key自定义绑定 键位 到命令magit-status
#+END_SRC
在新打开的magit窗口中（通过magit-status命令）
#+BEGIN_SRC 
s 小写s表示git add命令
c 表示commit命令
但以上两个步骤已经通过git-auto-commit自动commit过了
P u 大写P表示push命令
#+END_SRC
** Git-auto-commit 每次保存文件自动commit到github 需要在.spaces中初始化才能startup载入
*** 配置步骤
 需要两步：
 1. unsigned 需要在.spaces中初始化才能startup载入 add package 
 2. gac-automatically-push-p 当变量不为0时，还可以自动push！！！！ 在package里面customize这个变量即可
 3. 绑定按键 C-x p 自动commit+push
 4. 下载下来package之后， 需要运行 M-m ! 打开shell窗口配置github
 5. 显示信息: minor mode窗口会有gac标志
 #+BEGIN_SRC 
 git config --global user.email yyang181@github.com
 #+END_SRC
*** 使用方法
当且仅当 处理单个文件的编译时，想要多次一键测试结果 可以开启 gac-mode,也即git-auto-commit-mode

快捷键
#+BEGIN_SRC 
C-x p 打开gac模式，使得保存文件之后自动commit push
#+END_SRC
*** 按键配置代码 init.el文件
#+BEGIN_SRC 
;; global-set-key
(global-set-key (kbd "C-x p") 'git-auto-commit-mode)
#+END_SRC
** Evil-nerd-commenter Package 
*** 配置步骤
unsigned 需要在.spaces中初始化才能startup载入

需要在init.el中配置默认按键
#+BEGIN_SRC 
;; set up default hotkeys for evilnc
;;
;; evil-nerd-commenter
(evilnc-default-hotkeys)
#+END_SRC
设置按键
#+BEGIN_SRC 
(evilnc-default-hotkeys) 使用默认按键
#+END_SRC
*** 使用方法
#+BEGIN_SRC 
C-u number M-; 注释从当前行开始的 number 行
#+END_SRC
** Flycheck
*** 配置方法
package unsigned 需要在.spacemacs中配置

To enable Flycheck add the following to your init file:
#+BEGIN_SRC 
   (add-hook 'after-init-hook #'global-flycheck-mode)
#+END_SRC
需要设置变量的值来激活
#+BEGIN_SRC 
C-h v type flycheck-check-syntax-automatically
把这个变量的值修改即可
#+END_SRC
** Git 综述
结合两个package完美一键push到github
- git-auto-commit: 保存当前文件时自动commit
- magit: s打开magit status界面
- magit: P u 一键push到github
- 前提条件是配置了git config --global
- 大量文件跟更改可以直接用git desktop
- 单文件修改调试可以用此文中的快捷键方法
** 神器：global-set-key自定义绑定 键位 到命令
*** 方法一 修改init.el文件
#+BEGIN_SRC 
;; global-set-key
(global-set-key (kbd "C-x g") 'magit-status)
#+END_SRC
*** 方法二 可能会出现单次设置单次使用
 #+BEGIN_SRC 
 M-x global-set-key 
 type 需要绑定的键位 并按enter确认
 type 需要绑定的命令 并按enter确认
 #+END_SRC
* Latex 编辑命令
** 中文环境包
#+BEGIN_SRC 
   % 中文支持包
   \usepackage{ctex}
   \usepackage{CJK}

    % 调用环境变量 
    \begin{CJK}{UTF8}{song}
    some content here.
    具体内容
    \end{CJK}
#+END_SRC
* Org mode 
** Useful Command
*** 编译 
#+BEGIN_SRC 
c-c c-e 编译生成html网站格式
c-c c-e 可选生成latex pdf
#+END_SRC
*** 标题
 #+BEGIN_SRC 
 TAB 切换标题
 s-TAB 切换标题
 m-left/right 升降级标题
 m-enter 插入一个同级标题
 #+END_SRC
*** 块标签
#+BEGIN_SRC 
 <s TAB 快速插入一个 源代码块标签
 <e TAB 快速插入一个 example块标签
 s    #+begin_src ... #+end_src   
 e    #+begin_example ... #+end_example  : 单行的例子以冒号开头  
 q    #+begin_quote ... #+end_quote      通常用于引用，与默认格式相比左右都会留出缩进  
 v    #+begin_verse ... #+end_verse      默认内容不换行，需要留出空行才能换行  
 c    #+begin_center ... #+end_center   
 l    #+begin_latex ... #+end_latex   
 L    #+latex:   
 h    #+begin_html ... #+end_html   
 H    #+html:   
 a    #+begin_ascii ... #+end_ascii   
 A    #+ascii:   
 i    #+index: line   
 I    #+include: line 
#+END_SRC
*** 排版段落格式
 - 单纯文字编辑 空一行即可
 - 可以用- 来表示要点提示的项目符号
 - 可以用上述块标签来表示源代码等
  *** Org-page 创建个人主页
** Org mode配置latex环境及常用宏包
中文宏包配置
#+BEGIN_SRC 
#+LATEX_HEADER: \usepackage[colorlinks=true,linkcolor=red]{hyperref}
#+END_SRC
其它可选命令小结
#+BEGIN_EXPORT latex
#+LATEX_HEADER: \usepackage[colorlinks=true,linkcolor=red]{hyperref}
#+LATEX_CLASS: org-article
#+TITLE: Org to \LaTeX
#+END_EXPORT
** Org-page package创建个人主页
From https://github.com/kelvinh/kelvinh.github.com
*** .emacs 文件源代码 手动添加package 注意：目前好像不能用
#+BEGIN_SRC 
;;; the following is only needed if you install org-page manually
(add-to-list 'load-path "path/to/org-page")
(require 'org-page)
(setq op/repository-directory "path/to/your/org/repository")
(setq op/site-domain "http://your.personal.site.com/")
;;; for commenting, you can choose either disqus, duoshuo or hashover
(setq op/personal-disqus-shortname "your_disqus_shortname")
(setq op/personal-duoshuo-shortname "your_duoshuo_shortname")
(setq op/hashover-comments t)
;;; the configuration below are optional
(setq op/personal-google-analytics-id "your_google_analytics_id")
#+END_SRC
* Jupyter notebook
** 常用命令
#+BEGIN_SRC 
执行当前cell，并自动跳到下一个cell：Shift Enter
执行当前cell，执行后不自动调转到下一个cell：Ctrl-Enter
是当前的cell进入编辑模式：Enter
退出当前cell的编辑模式：Esc
删除当前的cell：双D
为当前的cell加入line number：单L
将当前的cell转化为具有一级标题的maskdown：单1
将当前的cell转化为具有二级标题的maskdown：单2
将当前的cell转化为具有三级标题的maskdown：单3
为一行或者多行添加/取消注释：Crtl /
撤销对某个cell的删除：z
浏览器的各个Tab之间切换：Crtl PgUp和Crtl PgDn
快速跳转到首个cell：Crtl Home
快速跳转到最后一个cell：Crtl End
#+END_SRC
** 文件导入
***  如何将本地的.py文件load到jupyter的一个cell里面
 #+BEGIN_SRC 
 %load test.py #test.py是当前路径下的一个python文件
 #+END_SRC
*** 如何将网络中的.py文件load到jupyter的一个cell里面
 #+BEGIN_SRC 
在cell中输入%load http://.....，然后运行该cell，就会将load后面所对应地址的代码load到当前的cell中；
 #+END_SRC
*** 利用cell运行.py文件
#+BEGIN_SRC 
%run file.py
#+END_SRC
* Python 语言
** 帮助命令
#+BEGIN_SRC 
help() 查询括号里面的包、函数
#+END_SRC
* 待完成插件
evil-leader
- 然后用其实现markdown的所有功能（非常轻松）
- 可以用其方便的实现命令行功能（其实是emacs的功能）,使用linux的指令。
- 再之后可以尝试org-mode的gtd功能
- 再之后可以尝试下org-mode的导出功能,导出html之类的不值得提，org-mode可以导出和导出思维导图。
- 可以尝试一下org-mode的多文件查找，以及快速捕捉系统。
- 再之后可以尝试下org-mode的对代码块的强大处理
- 可以直接在代码块里执行c/c++/python等等语言，输出代码执行的结果，而无须切换回来
- 可以尝试了解下org-mode的与其它组件的配合。以及可以了解下emacs和evil。另外也可以了解下配合git实现版本管理。
- 最后，如果你对编程有些了解，那么所有你不满意的地方，都可以自己改，而不是向作者抱怨能否再下一版本实现某某功能。
